#!/usr/bin/env sh
# This script should be run from the root of the repo so it can find the files
# it needs. It is designed to be idempotent and can therefore be safely rerun.
set -e


CONFIG_FILE_MAP="
    $PWD/zsh/zshrc:$HOME/.zshrc
    $PWD/readline/inputrc:$HOME/.inputrc
    $PWD/git/config:$HOME/.config/git/config
    $PWD/karabiner/karabiner.json:$HOME/.config/karabiner/karabiner.json
"


main() {
    if [ -z "$1" ]; then
        1>&2 echo 'error: must specify a command'
        exit 1
    fi
    command="$1"
    shift
    case "$command" in
        install)
            install "$@"
            ;;
        remove)
            remove "$@"
            ;;
        *)
            1>&2 echo "error: command '$command' not recognized"
            exit 1
            ;;
    esac
}


install() {
    if [ "$#" -gt 0 ]; then
        1>&2 echo 'error: install takes no arguments'
        exit 1
    fi
    ensure_stock_commands
    create_zsh_extension_directories
    install_homebrew
    install_homebew_packages
    install_rustup
    link_configuration_files
    set_shell
}

ensure_stock_commands() {
    PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
}

create_zsh_extension_directories() {
    mkdir -p ~/.config/zsh/zshrc.d
    mkdir -p ~/.local/share/zsh/site-functions
}

install_homebrew() {
    # TODO: Pin to a specific commit? See https://apple.stackexchange.com/a/339124 for ideas.
    mkdir -p ~/.cache/dotfiles/homebrew
    if [ ! -e /usr/local/bin/brew ]; then
        if [ ! -f ~/.cache/dotfiles/homebrew/install.sh ]; then
            curl -fsSL -o ~/.cache/dotfiles/homebrew/install.sh \
                https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
        fi
        /bin/bash ~/.cache/dotfiles/homebrew/install.sh
    fi
    # TODO: Preempt "zsh compinit: insecure directories" with `chmod -R go-w "$(brew --prefix)/share"`?
}

install_homebew_packages() {
    # TODO: use HOMEBREW_NO_ANALYTICS=1 and HOMEBREW_NO_AUTO_UPDATE=1?
    if [ ! -e ~/.cache/dotfiles/homebrew/Brewfile.lock.json ]; then
        brew bundle install
        mv Brewfile.lock.json ~/.cache/dotfiles/homebrew/
    fi
    ln -sf "$PWD/zsh/zshrc.d/homebrew" ~/.config/zsh/zshrc.d/homebrew
    # TODO: finish with `brew completions link`?
    if [ ! -e /usr/local/bin/pipx ]; then
        /usr/local/bin/python3 -m pip install pipx
    fi
}

install_rustup() {
    mkdir -p ~/.cache/dotfiles/rustup
    if [ ! -e ~/.cargo/bin/rustup ]; then
        if [ ! -f ~/.cache/dotfiles/rustup/rustup-init.sh ]; then
            curl --proto '=https' --tlsv1.2 -sSf -o ~/.cache/dotfiles/rustup/rustup-init.sh \
                https://sh.rustup.rs
        fi
        sh ~/.cache/dotfiles/rustup/rustup-init.sh -y --no-modify-path
    fi
    ln -sf "$PWD/zsh/zshrc.d/cargo" ~/.config/zsh/zshrc.d/cargo
    ~/.cargo/bin/rustup completions zsh rustup >~/.local/share/zsh/site-functions/_rustup
    ~/.cargo/bin/rustup completions zsh cargo >~/.local/share/zsh/site-functions/_cargo
}

link_configuration_files() {
    for item in $CONFIG_FILE_MAP; do
        src="${item%:*}" tgt="${item#*:}"
        mkdir -p "$(dirname "$tgt")"
        ln -sf "$src" "$tgt"
    done
}

set_shell() {
    if [ ! "$(dscl . -read "$HOME" UserShell | cut -d' ' -f2)" = '/usr/local/bin/zsh' ]; then
        if ! grep '^/usr/local/bin/zsh$' /etc/shells >/dev/null; then
            echo '/usr/local/bin/zsh' | sudo tee -a /etc/shells >/dev/null
        fi
        chsh -s /usr/local/bin/zsh "$USER"
    fi
}


remove() {
    if [ "$#" -gt 0 ]; then
        1>&2 echo 'error: remove takes no arguments'
        exit 1
    fi
    targets="
        $HOME/.config/zsh/zshrc.d/homebrew
        $HOME/.config/zsh/zshrc.d/cargo
        $HOME/.local/share/zsh/site-functions/_rustup
        $HOME/.local/share/zsh/site-functions/_cargo
    "
    for item in $CONFIG_FILE_MAP; do
        tgt="${item#*:}"
        targets="$targets $tgt"
    done
    for tgt in $targets; do
        if [ -e "$tgt" ]; then
            echo "removing $tgt"
            rm "$tgt"
        fi
    done
}


main "$@"

# TODO: This installation machinery should be reusable to allow for installing
# multiple independent configurations. This `dotfiles` CLI needs to be separate
# from the configurations that it's installing. If `dotfiles` installs things
# from a given directory (defaulting to this base one), then it can be used to
# install both this base config and my work config (which is in another repo).
# Pro: a single `dotfiles` command to install and manage multiple config layers.
# Con: requires some kind of spec for declaring configs, at which point this is
# starting to look a lot like I'm implementing my own package manager. This can
# still be a viable approach *as long as* I keep it as simple as possible.
# Otherwise, I might as well use an already existing tool.

# Can't use homebrew. A brew formula are basically build instructions for
# building from a source tarball. I want to install things from the local repo,
# not from a tarball. Even with that aside, dotfiles would be installed
# globally, unless I had a separate git- or tarball-based installation of brew
# somewhere under HOME specifically for dotfiles management. And even with THAT
# aside, I'm not even sure brew is able to make symlinks in arbitrary locations.
