#!/usr/bin/python2.7
import argparse
import os
import subprocess
import sys


def parse_args():
    parser = argparse.ArgumentParser(
        description=(
            'Manage color themes for kitty. '
            'A "theme" is a kitty config file containing color definitions, '
            'e.g., see https://github.com/kdrag0n/base16-kitty/.'
        ),
    )
    subparsers = parser.add_subparsers()

    update_parser = subparsers.add_parser(
        'update',
        description=(
            'Update the theme in the current session. '
            'The update applies to all existing windows and all future windows '
            'in the session. The udpdate does not apply to new sessions, which '
            'continue to get their themes from `kitty.conf`.'
        ),
        help='update the theme in the current session',
    )
    update_parser.add_argument(
        'path',
        help='path to a kitty theme',
    )
    update_parser.set_defaults(func=update_theme)

    default_parser = subparsers.add_parser(
        'default',
        description=(
            'Set the default theme for new sessions by symlinking '
            '`~/.config/kitty/current_theme.conf` to the given theme file. '
            '`kitty.conf` should contain the line `include current_theme.conf` '
            'so that new sessions pick up the new theme. '
            'This does not affect the theme of any existing session.'
        ),
        help='set the default theme for new sessions',
    )
    default_parser.add_argument(
        'path',
        help='path to a kitty theme',
    )
    default_parser.set_defaults(func=default_theme)

    set_parser = subparsers.add_parser(
        'set',
        description='Set the theme (combines update and default).',
        help='set the theme (combines update and default)',
    )
    set_parser.add_argument(
        'path',
        help='path to a kitty theme',
    )
    set_parser.set_defaults(func=set_theme)

    choose_parser = subparsers.add_parser(
        'choose',
        description=(
            'Interactively choose which theme to set from a collection of '
            'files. Use "n" to update using the next theme, "p" to update using '
            'the previous theme, "c" to choose the theme as the default, and '
            '"q" to quit.'
        ),
        help='interactively choose a theme to set',
    )
    choose_parser.add_argument(
        'path',
        help='path to a kitty theme',
        nargs='+',
    )
    choose_parser.set_defaults(func=choose_theme)

    return parser.parse_args()


def update_theme(args):
    path = os.path.abspath(args.path)
    subprocess.check_call(['kitty', '@', 'set-colors', '--all', '--configured', path])


def default_theme(args):
    path = os.path.abspath(args.path)
    linkpath = os.environ['HOME'] + '/.config/kitty/current_theme.conf'
    if os.path.exists(linkpath) or os.path.islink(linkpath):
        os.remove(linkpath)
    os.symlink(path, linkpath)


def set_theme(args):
    path = os.path.abspath(args.path)
    update_theme(args)
    default_theme(args)


def choose_theme(args):
    paths = args.path
    i = 0
    set_theme(argparse.Namespace(path=paths[i]))
    response = 'n'
    while response != 'q':
        response = raw_input('{0} | (p)revious, (n)ext, or (q)uit: '.format(paths[i]))
        if response in ('n', 'p'):
            if response == 'n':
                i = (i + 1) % len(paths)
            else:
                i = (i - 1) % len(paths)
            set_theme(argparse.Namespace(path=paths[i]))
        else:
            pass


def main():
    args = parse_args()
    args.func(args)




if __name__ == '__main__':
    main()

